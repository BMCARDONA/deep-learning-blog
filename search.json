[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Recent college graduate, and a deep learning practitioner!\nYou can find my personal website here."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Deep Learning Blog",
    "section": "",
    "text": "Creating a Hot Dog / Not Hot Dog Classifer Using Fast.Ai\n\n\n\n\n\n\n\ncode\n\n\nproject\n\n\n\n\n\n\n\n\n\n\n\nAug 17, 2023\n\n\nBradley Cardona\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 14, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hot-dog-classifier/index.html",
    "href": "posts/hot-dog-classifier/index.html",
    "title": "Creating a Hot Dog / Not Hot Dog Classifer Using Fast.Ai",
    "section": "",
    "text": "Having recently completed DeepLearning.AI’s wonderful Deep Learning Specialization, I thought I would start the Practical Deep Learning for Coders course by fast.ai. I recently completed the third lesson of Part I, and decided that I wanted to make a binary classifier to test whether an image belongs to the “hot dog” or “not hot dog” class, as seen on that famous Silicon Valley episode.\nTo create this project, I used the fast.ai library, Gradio, HuggingFace Spaces, this Kaggle dataset, and Google Colab. This article will discuss the notebook that I used to train my model, in addition to the steps I took to deploy it. Feel free to check out my deployed project here. :)\nTo begin the notebook, I imported any necessary dependencies.\nfrom fastai.vision.all import *\nimport timm\nfrom google.colab import drive\nimport os\nSince I was using Google Colab to execute my notebook cells, next I needed to mount my Google Drive to the Colab notebook’s file system. (This allows one to access and manipulate files stored in one’s Google Drive directly from within one’s Colab notebook.)\n# Mount Google Drive\ndrive.mount('/content/drive')\nI then specified the path to my dataset directory, which itself contained two additional subdirectories: hot-dog and not-hot-dog. The former contained photos of hot dogs, the latter photos of “not hot dogs.”\npath = '/content/drive/MyDrive/fast_ai_experiments/3_neural_net_foundations/hot_dog_not_hotdog/dataset/'\nEvery image in the hot-dog and not-hot-dog subdirectories had a naming format of “number.jpg” (e.g., “1231.jpg”). For the sake of using a better naming format, therefore, I decided to use the format of “hot-dog_index” (e.g., “hot-dog_12.jpg”) for the images of the hot-dog subdirectory, and “not-hot-dog_index” (e.g., “not-hot-dog_12.jpg”) for the images of the not-hot-dog subdirectory.\n# List of subdirectories\nsubdirectories = ['hot-dog', 'not-hot-dog']\n\n# Iterate through subdirectories\nfor subdir in subdirectories:\n    subdir_path = os.path.join(path, subdir)\n\n    # List all files in the subdirectory\n    file_list = os.listdir(subdir_path)\n\n    # Iterate through the files and rename them with a numbered sequence\n    for i, filename in enumerate(file_list, start=1):\n        if filename.endswith(\".jpg\"):\n            new_filename = f\"{subdir}_{i}.jpg\"\n            os.rename(os.path.join(subdir_path, filename), os.path.join(subdir_path, new_filename))\nNext, I used the ImageDataLoaders.from_name_func() method. This is a fast.ai method for creating “data loaders” for image classification tasks; it takes various arguments, and defines how the data should be loaded and prepared.\nUsing this method, we will define our training/validation split as 80% for training and 20% for validation; we will label each image in the hot-dog subdirectory as “hot-dog” and each image in the not-hot-dog one as “not-hot-dog”; and we will re-size each image to be 224 x 224 in pixel size.\n# Creating ImageDataLoaders\ndls = ImageDataLoaders.from_name_func(\n    path,\n    get_image_files(path),\n    valid_pct=0.2,\n    seed=42,\n    label_func=RegexLabeller(pat = r'^([^/]+)_\\d+'),\n    item_tfms=Resize(224),\n)\nLet’s now see a batch of 20 labeled images:\ndls.show_batch(max_n=20)\n\n\n\npng\n\n\nNice! Let’s now harness the capabilities of the fast.ai library to use transfer learning. We will create a learner object for image classification using the ResNet-34 architecture; train the model on our training set for 3 epochs; and then evaluate the model’s performance on the validation set using the “error rate” metric.\nlearn = vision_learner(dls, resnet34, metrics=error_rate)\nlearn.fine_tune(3)\n\n\n\n\n\n\nepoch\n\n\ntrain_loss\n\n\nvalid_loss\n\n\nerror_rate\n\n\ntime\n\n\n\n\n\n\n0\n\n\n0.890783\n\n\n0.328621\n\n\n0.130653\n\n\n02:10\n\n\n\n\n\n\n\n\n\n\n\nepoch\n\n\ntrain_loss\n\n\nvalid_loss\n\n\nerror_rate\n\n\ntime\n\n\n\n\n\n\n0\n\n\n0.457683\n\n\n0.231882\n\n\n0.105528\n\n\n00:13\n\n\n\n\n1\n\n\n0.270772\n\n\n0.355318\n\n\n0.110553\n\n\n00:08\n\n\n\n\n2\n\n\n0.187048\n\n\n0.347728\n\n\n0.105528\n\n\n00:10\n\n\n\n\n\nBased on Jeremy Howard’s analysis, it might make sense for us to try a different model to improve our error rate. Let’s try the convnext models.\ntimm.list_models('convnext*')\n['convnext_atto',\n 'convnext_atto_ols',\n 'convnext_base',\n 'convnext_femto',\n 'convnext_femto_ols',\n 'convnext_large',\n 'convnext_large_mlp',\n 'convnext_nano',\n 'convnext_nano_ols',\n 'convnext_pico',\n 'convnext_pico_ols',\n 'convnext_small',\n 'convnext_tiny',\n 'convnext_tiny_hnf',\n 'convnext_xlarge',\n 'convnext_xxlarge',\n 'convnextv2_atto',\n 'convnextv2_base',\n 'convnextv2_femto',\n 'convnextv2_huge',\n 'convnextv2_large',\n 'convnextv2_nano',\n 'convnextv2_pico',\n 'convnextv2_small',\n 'convnextv2_tiny']\nlearn = vision_learner(dls, 'convnext_tiny_in22k', metrics=error_rate).to_fp16()\nlearn.fine_tune(3)\n\n\n\n\n\n\nepoch\n\n\ntrain_loss\n\n\nvalid_loss\n\n\nerror_rate\n\n\ntime\n\n\n\n\n\n\n0\n\n\n0.507469\n\n\n0.354891\n\n\n0.090452\n\n\n00:09\n\n\n\n\n\n\n\n\n\n\n\nepoch\n\n\ntrain_loss\n\n\nvalid_loss\n\n\nerror_rate\n\n\ntime\n\n\n\n\n\n\n0\n\n\n0.174055\n\n\n0.094325\n\n\n0.040201\n\n\n00:08\n\n\n\n\n1\n\n\n0.131543\n\n\n0.100523\n\n\n0.045226\n\n\n00:10\n\n\n\n\n2\n\n\n0.093354\n\n\n0.084719\n\n\n0.045226\n\n\n00:09\n\n\n\n\n\nIndeed, using the convnext models, our error rate has dropped from 0.105528 to 0.045226! Hot dog!\nlearn.export('model.pkl')"
  }
]